import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JButton;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Vector;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Panel;

/*
@SuppressWarnings("serial")
abstract class Shape implements Serializable{
    int startX;
    int startY;
    Color color;
    int lastX;
    int lastY;
    int Thickness;
    boolean fillFlag;
    abstract void draw(Graphics g);
    abstract void draw(Graphics g, int x, int y, int x2, int y2);

    public Shape() {
        // TODO Auto-generated constructor stub
        startX = startY = 0;
        lastX = lastY = 0;
        color = new Color(255,255,255);
        fillFlag = false;
    }

    void setCoordinate(int x, int y, int x2, int y2) {
        startX = x;
        startY = y;
        lastX = x2;
        lastY = y2;
    }

    void setColor(Color color) {
        this.color = color;
    }

    void setThickness(int Thickness) {
        this.Thickness = Thickness;
    }

    static Shape create(String selected)
    {
        if(selected.equals("Line"))
            return new Line();
        if(selected.equals("Oval"))
            return new Oval();
        if(selected.equals("Rect"))
            return new Rect();
        else
            return null;
    }
}

@SuppressWarnings("serial")
class Line extends Shape implements Serializable{
    void draw(Graphics g)
    {
        Graphics2D g2 = (Graphics2D)g;
        g2.setStroke(new BasicStroke(Thickness, BasicStroke.CAP_ROUND, 0));
        g2.setColor(color);
        g2.drawLine(startX, startY, lastX, lastY);
    }

    void draw(Graphics g, int x, int y, int x2, int y2)
    {
        g.setColor(color);
        g.drawLine(x, y, x2, y2);
    }
}


@SuppressWarnings("serial")
class Oval extends Shape implements Serializable{
    void draw(Graphics g)
    {
        Graphics2D g2 = (Graphics2D)g;
        g2.setStroke(new BasicStroke(Thickness, BasicStroke.CAP_ROUND, 0));
        g2.setColor(color);
        if(fillFlag == true)
        {
            g2.fillOval(Math.min(startX, lastX), Math.min(startY, lastY),
                    Math.abs(lastX - startX), Math.abs(lastY - startY));

        }
        else
        {

            g2.drawOval(Math.min(startX, lastX), Math.min(startY, lastY),
                    Math.abs(lastX - startX), Math.abs(lastY - startY));

        }
    }

    void draw(Graphics g, int x, int y, int x2, int y2)
    {
        Graphics2D g2 = (Graphics2D)g;
        g2.setStroke(new BasicStroke(Thickness, BasicStroke.CAP_ROUND, 0));
        g2.setColor(color);
        if(fillFlag == true)
        {
            g2.fillOval(Math.min(x, x2), Math.min(y, y2),
                    Math.abs(x2 - x), Math.abs(y2 - y));

        }
        else
        {

            g2.drawOval(Math.min(x, x2), Math.min(y, y2),
                    Math.abs(x2 - x), Math.abs(y2 - y));
        }
    }
}

@SuppressWarnings("serial")
class Rect extends Shape implements Serializable{
    void draw(Graphics g)
    {
        Graphics2D g2 = (Graphics2D)g;
        g2.setStroke(new BasicStroke(Thickness, BasicStroke.CAP_ROUND, 0));
        g2.setColor(color);
        if(fillFlag == true)
        {
            g2.fillRect(Math.min(startX, lastX), Math.min(startY, lastY),
                    Math.abs(lastX - startX), Math.abs(lastY - startY));
        }
        else
        {
            g2.drawRect(Math.min(startX, lastX), Math.min(startY, lastY),
                    Math.abs(lastX - startX), Math.abs(lastY - startY));
        }
    }

    void draw(Graphics g, int x, int y, int x2, int y2)
    {
        Graphics2D g2 = (Graphics2D)g;
        g2.setStroke(new BasicStroke(Thickness, BasicStroke.CAP_ROUND, 0));
        g2.setColor(color);
        if(fillFlag == true)
        {
            g2.fillRect(Math.min(x, x2), Math.min(y,y2),
                    Math.abs(x2 - x), Math.abs(y2 - y));
        }
        else
        {
            g2.drawRect(Math.min(x, x2), Math.min(y, y2),
                    Math.abs(x2 - x), Math.abs(y2 - y));
        }
    }
}
*/
public class First extends JPanel implements ActionListener, Runnable {
	newWindow_draw draw;
	private JFrame frame = new JFrame();
	Container con = frame.getContentPane();
    JMenuBar MenuBar = new JMenuBar();
    int option;
    public static final int LINE = 1;
    
    Thread AutoSaveThread;
    int x,y;
    int startX;
    int startY;
    int lastX;
    int lastY;
    Container contentPane;
    JButton fgButton;
    JButton bgButton;
    MyCanvas canvas;
    Shape currentShape;
    JLabel lblState;
    String selected;
    Vector<Shape> shapeList;


    Vector<Shape> RedoList;
    int Linesize;
    boolean FillSelected;
    boolean DeleteSelected;
    boolean MoveSelected;
    boolean ResizeSelected;
//	frame = new JFrame();

	@Override
	public void actionPerformed(ActionEvent e) {
		
		// TODO Auto-generated method stub
		if( ((JButton)e.getSource()).getText().equals("Drawings")) {
			draw = new newWindow_draw(this);
		}
		else if ( ((JButton)e.getSource()).getText().equals("Line")) {
			
//			System.out.println("aa");
//			con.add(new JPanel()); 
			graphicOne g = new graphicOne();
			frame.add(g);
		}
	}
	
	public First() {
//		public static JFrame frame;
//		frame = new JFrame();
//		graph\.add(g);
		selected = "Line";
        x = y = 0;
        shapeList = new Vector<Shape>();
        RedoList = new Vector<Shape>();


        FillSelected = false;		//채우기 선택
        DeleteSelected = false;	//삭제 선택
        MoveSelected = false;		//이동 선택
        ResizeSelected = false;   //리사이즈 선택
        Linesize = 1;
        AutoSaveThread = new Thread(this);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        contentPane = getContentPane();
        
		frame.getContentPane().setBackground(new Color(248, 248, 255));
		frame.getContentPane().setForeground(new Color(230, 230, 250));
		frame.setBounds(300, 100, 900, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JButton DrawB = new JButton("Drawings");
		DrawB.setForeground(new Color(240, 128, 128));
		DrawB.setFont(new Font("Bradley Hand", Font.PLAIN, 20));
		DrawB.setBackground(new Color(250, 235, 215));
		DrawB.addActionListener(this);
//		
//		JMenu mnEdit = new JMenu("편집");
//	    MenuBar.add(mnEdit);
//		JMenuItem mntmLine = new JMenuItem("선 그리기");
//        mntmLine.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                selected = "Line";
//            }
//        });
//        mnEdit.add(mntmLine);
//		DrawB.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//				new newWindow_draw();
////				line
//			}
//		});
		frame.getContentPane().add(DrawB, BorderLayout.NORTH);
		
		JButton SetB = new JButton("Settings");
		SetB.setForeground(new Color(189, 183, 107));
		SetB.setFont(new Font("Bradley Hand", Font.PLAIN, 16));
		SetB.setBackground(new Color(143, 188, 143));
		SetB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				option = LINE;
				selected = "Line";
			}
		});
		frame.getContentPane().add(SetB, BorderLayout.WEST);
		
		JButton DivB = new JButton("Diverse Functions");
		DivB.setForeground(new Color(112, 128, 144));
		DivB.setFont(new Font("Bradley Hand", Font.PLAIN, 20));
		DivB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new newWindow_divF();
			}
		});
		frame.getContentPane().add(DivB, BorderLayout.SOUTH);
		
	}
	
		/**
		 * Launch the application.
		 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					First window = new First();
					window.frame.setVisible(true);
					//window.paint(g);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

	}
	
	class graphicOne extends JPanel {
	    public void paint(Graphics g) { 
	    	// TODO Auto-generated method stub 
	    	super.paint(g); 
	    	// 그려지는 곳 1 
	    	if (option == LINE) {
	    	System.out.println("mm");
//	    	g.drawLine(x1, y1, x2, y2); 
	    	}
	    	
	    }
	}
	
	class CanvasMouseListener implements MouseListener, MouseMotionListener{
        Shape shape = null;
        public void mouseEntered(MouseEvent e) {}
        public void mouseExited(MouseEvent e) {}

        public void mousePressed(MouseEvent e) {
            if(MoveSelected == true)
            {
                for(int i=0;i<shapeList.size();i++)
                {
                    shape = shapeList.get(i);
                    if(shape.startX <= e.getX() && e.getX() <= shape.lastX &&
                            shape.startY <= e.getY() && e.getY() <= shape.lastY )
                    {
                        break;
                    }
                }
                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setXORMode(Color.lightGray);
                shape.draw(g2);
            }
            else if(ResizeSelected == true)
            {
                for(int i=0;i<shapeList.size();i++)
                {
                    shape = shapeList.get(i);
                    if(shape.startX <= e.getX() && e.getX() <= shape.lastX &&
                            shape.startY <= e.getY() && e.getY() <= shape.lastY )
                    {
                        break;
                    }
                }
            }
            else
            {
                currentShape = Shape.create(selected);
                //마우스가 클릭된 순간,selected 값에 따라 객체 생성(라인,타원,사각형)후 반환
                currentShape.color = canvas.getForeground();
                currentShape.Thickness = Linesize;

                x=startX = lastX = e.getX();
                y=startY = lastY = e.getY();

                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setStroke(new BasicStroke( currentShape.Thickness, BasicStroke.CAP_ROUND, 0));

                g2.setXORMode(Color.lightGray);
                currentShape.draw(g2, startX, startY, lastX, lastY);
            }
            stateDisplay();

        }
        @Override
        public void mouseReleased(MouseEvent e) {
            if(MoveSelected == true)
            {
                MoveSelected = false;
                canvas.repaint();
            }
            else if(ResizeSelected == true)
            {
                ResizeSelected = false;
                canvas.repaint();
            }
            else
            {
                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setStroke(new BasicStroke( currentShape.Thickness, BasicStroke.CAP_ROUND, 0));

                g2.setColor(canvas.getForeground());

                x = lastX = e.getX();
                y = lastY = e.getY();

                currentShape.draw(g2, startX, startY, lastX, lastY);
                currentShape.setCoordinate(startX, startY, lastX, lastY);
                shapeList.add(currentShape);
            }
        }
        public void mouseClicked(MouseEvent e) {
            Shape shape;
            if(FillSelected == true)
            {
                for(int i=0;i<shapeList.size();i++)
                {
                    shape = shapeList.get(i);
                    if(shape.startX <= e.getX() && e.getX() <= shape.lastX &&
                            shape.startY <= e.getY() && e.getY() <= shape.lastY )
                    {
                        shape.color =  canvas.getForeground();
                        shape.fillFlag = true;
                        canvas.repaint();
                        break;
                    }
                }
            }
            else if(DeleteSelected == true)
            {
                for(int i=0;i<shapeList.size();i++)
                {
                    shape = shapeList.get(i);
                    if(shape.startX <= e.getX() && e.getX() <= shape.lastX &&
                            shape.startY <= e.getY() && e.getY() <= shape.lastY )
                    {
                        shapeList.remove(i);
                        canvas.repaint();
                    }
                }

            }
            DeleteSelected = false;
            FillSelected = false;
        }
        public void mouseDragged(MouseEvent e)
        {
            if(MoveSelected == true)
            {
                x = e.getX();
                y = e.getY();
                stateDisplay();

                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setStroke(new BasicStroke( shape.Thickness, BasicStroke.CAP_ROUND, 0));

                g2.setXORMode(Color.lightGray);
                int width = (shape.lastX - shape.startX)/2;
                int height = (shape.lastY - shape.startY)/2;

                shape.draw(g2, shape.startX,  shape.startY,  shape.lastX,  shape.lastY);
                shape.draw(g2, x - width,  y - height,  x + width,  y + height);

                shape.startX = x - width;
                shape.startY = y - height;
                shape.lastX = x + width;
                shape.lastY = y + height;
                canvas.repaint();
            }
            else if(ResizeSelected == true)
            {
                x = e.getX();
                y = e.getY();
                stateDisplay();

                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setStroke(new BasicStroke( shape.Thickness, BasicStroke.CAP_ROUND, 0));

                g2.setXORMode(Color.lightGray);
                int width = (shape.lastX - shape.startX)/2;
                int height = (shape.lastY - shape.startY)/2;

                shape.draw(g2, shape.startX,  shape.startY,  shape.lastX,  shape.lastY);
                shape.draw(g2, shape.startX,  shape.startY,  x + width,  y + height);
                shape.lastX = x + width;
                shape.lastY = y + height;
                canvas.repaint();
            }
            else
            {
                x = e.getX();
                y = e.getY();
                stateDisplay();

                Graphics g = ((Canvas) e.getSource()).getGraphics();

                Graphics2D g2 = (Graphics2D)g;
                g2.setStroke(new BasicStroke( currentShape.Thickness, BasicStroke.CAP_ROUND, 0));

                g2.setXORMode(Color.lightGray);

                currentShape.draw(g2, startX, startY, lastX, lastY);
                currentShape.draw(g2, startX, startY, x, y);

                lastX = x;
                lastY = y;
            }
        }
        @Override
        public void mouseMoved(MouseEvent e) {
            lastX = x = e.getX();
            lastY = y = e.getY();
            stateDisplay();
        }
    }
	
	  @Override
	    public void run() {
	        // TODO Auto-generated method stub
	        while(true)
	        {
	            try {
	                AutoSaveThread.sleep(60000);
	                //1분 마다 자동 저장한다.
	                ObjectOutputStream AutoSaveFile = new ObjectOutputStream(new FileOutputStream("autoSave"));
	                AutoSaveFile.writeObject(canvas.getBackground());
	                for(int i=0;i<shapeList.size();i++)
	                    AutoSaveFile.writeObject(shapeList.get(i));
	                AutoSaveFile.close();
	            } catch (InterruptedException e) {
	                return;
	                // TODO: handle exception
	            } catch (IOException e2) {
	                return;
	            }

	        }
	    }
	
	
}
	

	
//}

 
