import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.SwingConstants;
import javax.swing.Timer;

public class Frame extends JFrame implements MouseListener {
	private int mode = 0; // 1: 나 , 2: 상대방
	private int first = 0; // 2 end
	private Point blackPoint = new Point();
	private Point whitePoint = new Point();
	private JLabel black;
	private JLabel white;
	private BufferedImage blackBI;
	private BufferedImage whiteBI;
	private BufferedImage benBI;
	private JPanel panel;
	private boolean firstCheck = false;
	private int blackCount = 1;
	private int whiteCount = 1;
	private ArrayList<Point> blackList = new ArrayList<Point>();
	private ArrayList<Point> whiteList = new ArrayList<Point>();
	private ArrayList<Point> pointList = new ArrayList<Point>();
	private int[][] selectedPoint = new int[19][19];
	private boolean gameStart = false;
	private int count = 1500;
	private Timer timer;
	private JLabel benSpot = new JLabel();
	private Point benPoint = new Point();
	private static finish f = null;
	private static Drew d = null;
	private JLabel currentRock;
	private int[][] weightGraph = new int[19][19];
//   private int[][] weightBlack = {{-1,-1,-1},{-1,1111,-1},{-1,-1,-1}};
//   private int[][] weightWhite = {{1,1,1},{1,2222,1},{1,1,1}};
	private int arr[] = { -1, 0, 1 };
	private ArrayList<Point> blackSearch = new ArrayList<Point>();
	private Robot AIRobot;
	private Point temp1 = new Point();
	private Point temp2 = new Point();
	private boolean firstCheckFour = false;
	private boolean firstCheckFive = false;
	private boolean attackCheckFour = false;

	public Frame() {
		for (int i = 0; i < weightGraph.length; i++) {
			for (int j = 0; j < weightGraph[i].length; j++) {
				weightGraph[i][j] = 0;
			}
		}
		try {
			blackBI = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/blackRock.png"));
			whiteBI = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/whiteRock.png"));
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		for (int i = 0; i < selectedPoint.length; i++) {
			for (int j = 0; j < selectedPoint[i].length; j++) {
				selectedPoint[i][j] = 0;
			}
		}
		setSize(1150, 850);
		setLocation(100, 50);
		getContentPane().setLayout(null);
		getContentPane().setBackground(Color.black);
		ImageIcon boardImage = new ImageIcon(Main.class.getResource("board.png"));

		JLabel board = new JLabel(boardImage);
		board.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent e) {
				if (mode == 0) {
					for (int i = 0; i < weightGraph.length; i++) {
					for (int j = 0; j < weightGraph[i].length; j++) {
						System.out.print(weightGraph[i][j] + " ");
					}
					System.out.println();
				}
					boolean benCheck = true;
					benPoint = e.getPoint();
					
					for (int i = 0; i < 19; i++) {
						if (benPoint.x >= 37 * i && benPoint.x <= 37 * (i + 1)) {
							benPoint.x = 37 * i;
						}
						if (benPoint.y >= 37 * i && benPoint.y <= 37 * (i + 1)) {
							benPoint.y = 37 * i;
						}
					}

					benSpot = new JLabel(new ImageIcon(Main.class.getResource("benmark.png")));
					benSpot.setBackground(new Color(220, 179, 92));
					benSpot.setBounds(benPoint.x, benPoint.y, 35, 35);
					benSpot.setOpaque(true);

					for (int i = 0; i < pointList.size(); i++) {
						if (pointList.get(i).x == benPoint.x && pointList.get(i).y == benPoint.y) {
							benCheck = false;
							break;
						}
					}
					if (benCheck) {
						selectedPoint[benPoint.y / 37][benPoint.x / 37] = 3;
						weightGraph[benPoint.y / 37][benPoint.x / 37] = 3333;
						pointList.add(benPoint);
						System.out.println(pointList.size());
					}

					try {
						benBI = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/benmark.png"));
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					getContentPane().add(benSpot);
					benSpot.setIcon(new ImageIcon(benBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
					panel.add(benSpot);

				}

				if (gameStart) {
					if (mode == 1) { // 검정돌의 차례일 때
						blackPoint = e.getPoint();
//                  System.out.println(blackPoint.x);

						for (int i = 0; i < 19; i++) {
							if (blackPoint.x >= 37 * i && blackPoint.x <= 37 * (i + 1)) {
//                        blackPoint.x = 37 * i + 20  ;
								blackPoint.x = 37 * i;
							}
							if (blackPoint.y >= 37 * i && blackPoint.y <= 37 * (i + 1)) {
//                        blackPoint.y = 37 * i + 20 ;
								blackPoint.y = 37 * i;
							}
						}
						System.out.println(blackPoint.x / 37 + " " + blackPoint.y / 37);

						black = new JLabel(new ImageIcon(Main.class.getResource("blackRock.png")));
//                  
						black.setBackground(new Color(220, 179, 92));
						black.setBounds(blackPoint.x, blackPoint.y, 35, 35);

						try {
							blackBI = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/blackRock.png"));
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

						Graphics g = black.getGraphics();
						getContentPane().add(black);
						black.setIcon(new ImageIcon(blackBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));

						panel.add(black);

						boolean check = true;
						for (int i = 0; i < pointList.size(); i++) {
							if (pointList.get(i).x == blackPoint.x && pointList.get(i).y == blackPoint.y) {
								check = false;
								break;
							}
						}
						if (check) {
							try {
								AIRobot = new Robot();
							} catch (AWTException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
							benSpot.setOpaque(false);
							black.setOpaque(true);
							selectedPoint[blackPoint.y / 37][blackPoint.x / 37] = 1;

							boolean five = BlackBlockFive(blackPoint);
							boolean attackfour = attackFour();
							if (attackfour) {
								temp1 = blackSearch.get(0);
								temp2 = blackSearch.get(1);
								attackCheckFour = true;
							} else {
								if (five == true) {
									temp1 = blackSearch.get(0);
									temp2 = blackSearch.get(1);
									firstCheckFive = true;
								} else {
									boolean four = BlackBlock(blackPoint);
									System.out.println(four);
									if (four == true) {
										temp1 = blackSearch.get(0);
										temp2 = blackSearch.get(1);
										firstCheckFour = true;
									} else {

									}
								}
							}

							for (int i = 0; i < 3; i++) {
								for (int j = 0; j < 3; j++) {
									if (i == 1 && j == 1) {
										weightGraph[blackPoint.y / 37][blackPoint.x / 37] = 1111;
									} else { // 오류 수정 필요 (바깥라인)
										if ((blackPoint.y / 37 + arr[i] >= 0 && blackPoint.x / 37 + arr[i] >= 0
												&& blackPoint.x / 37 + arr[i] < 19 && blackPoint.y / 37 + arr[i] < 19)
												|| (blackPoint.y / 37 + arr[j] >= 0 && blackPoint.x / 37 + arr[j] >= 0
														&& blackPoint.x / 37 + arr[j] < 19
														&& blackPoint.y / 37 + arr[j] < 19)) {
											weightGraph[blackPoint.y / 37 + arr[i]][blackPoint.x / 37 + arr[j]] += -1;
										}
									}
								}
							}

							int vic = victory();
							if (vic == 1) {
								System.out.println("BLACK WIN !");
								finish.win1 += 1;
								finish.lose2 += 1;
								finish.setWinner(1);
								f = new finish();
								f.setVisible(true);
								gameStart = false;
							} else if (vic == 2) {
								finish.win2 += 1;
								finish.lose1 += 1;
								System.out.println("WHITE WIN !");
								finish.setWinner(2);
								f = new finish();
								f.setVisible(true);
								gameStart = false;
							}
							if (!firstCheck) {
								currentRock.setBackground(Color.black);
								currentRock.setOpaque(true);
								currentRock.setIcon(
										new ImageIcon(whiteBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
								count = 1500;
								mode = 2;
								blackList.add(blackPoint);
								pointList.add(blackPoint);
								firstCheck = true;
								int[][] first = { { blackPoint.x + 37, blackPoint.y },
													{ blackPoint.x, blackPoint.y + 37 }, 
													{ blackPoint.x - 37, blackPoint.y },
													{ blackPoint.x, blackPoint.y - 37 } };

								int x = blackPoint.x + 37;
								int y = blackPoint.y;
								int x2 = blackPoint.x;
								int y2 = blackPoint.y - 37;

								for (int i = 0; i < pointList.size(); i++) {
									for (int j = 0; j < first.length; j++) {
										if ((pointList.get(i).x == x && pointList.get(i).y == y)
												|| (x == x2 && y == y2)) {
											x = first[j][0];
											y = first[j][1];
										} else {
											break;
										}
									}

									for (int j = 0; j < first.length; j++) {
										if (pointList.get(i).x == x2 && pointList.get(i).y == y2
												|| (x == x2 && y == y2)) {
											x2 = first[j][0];
											y2 = first[j][1];
										} else {
											break;
										}
									}
								}
								System.out.println(x + " " + y + "  " + x2 + " " + y2);

//                          AIRobot.mouseMove( x + 37 * 4, y + 37 * 4);

								AIRobot.mouseMove(x + 37 * 4, y + 37 * 3);
								AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
								AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

//								AIRobot.mouseMove(x2 + 37 * 4, y2 + 37 * 4);
		                        AIRobot.mouseMove(x2 + 37 * 4, y2 + 37 * 3);
								AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
								AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

//                        // 첫 까만돌의 좌표 x+37, y+37
//                        System.out.println(blackPoint.x/37 + " "+ blackPoint.y/37);
//                        AIRobot.mouseMove(blackPoint.x + 37 * 5, blackPoint.y + 37 * 3);
//                        AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
//                        AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
//                        // 
//                        AIRobot.mouseMove(blackPoint.x + 37 * 4, blackPoint.y + 37 * 2);
//                        AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
//                        AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
//                        
							} else if (firstCheck && blackCount == 2) {
								currentRock.setBackground(Color.black);
								currentRock.setOpaque(true);
								currentRock.setIcon(
										new ImageIcon(whiteBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
								count = 1500;
								blackCount = 1;
								mode = 2;
//                        System.out.println("BLACK");
								blackList.add(blackPoint);
								pointList.add(blackPoint);
								if (firstCheckFour) {
									System.out.println("가로4개 ");
									int[][] first = { { blackPoint.x + 37, blackPoint.y },
											{ blackPoint.x, blackPoint.y + 37 }, { blackPoint.x - 37, blackPoint.y },
											{ blackPoint.x, blackPoint.y - 37 } };

									int x = blackPoint.x + 37;
									int y = blackPoint.y;
									int x2 = blackPoint.x;
									int y2 = blackPoint.y - 37;

									for (int i = 0; i < pointList.size(); i++) {
										for (int j = 0; j < first.length; j++) {
											if ((pointList.get(i).x == x && pointList.get(i).y == y)
													|| (x == x2 && y == y2)) {
												x = first[j][0];
												y = first[j][1];
											} else {
												break;
											}
										}

										for (int j = 0; j < first.length; j++) {
											if (pointList.get(i).x == x2 && pointList.get(i).y == y2
													|| (x == x2 && y == y2)) {
												x2 = first[j][0];
												y2 = first[j][1];
											} else {
												break;
											}
										}
									}
									AIRobot.mouseMove(x + 37 * 4, y + 37 * 3);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

									AIRobot.mouseMove(x2 + 37 * 6, y2 + 37 * 5);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

									blackSearch.clear();
									firstCheckFour = false;
									firstCheckFive = false;
								} else if (firstCheckFive) {
									System.out.println("HELLO");
									AIRobot.mouseMove(temp1.x + 37 * 5, temp1.y + 37 * 5);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

									AIRobot.mouseMove(temp2.x + 37 * 5, temp2.y + 37 * 5);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

									blackSearch.clear();
									firstCheckFour = false;
									firstCheckFive = false;

								} else if (attackCheckFour) {
									AIRobot.mouseMove(temp1.x + 37 * 5, temp1.y + 37 * 5);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

									AIRobot.mouseMove(temp2.x + 37 * 5, temp2.y + 37 * 5);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

								} else {
									int min = 999999;
									Point tempT1 = null;
									Point tempT2 = null;
									for (int i = 0; i < whiteList.size(); i++) {
										tempT1 = whiteList.get(i);
										for (int z = tempT1.y / 37 - 2; z < tempT1.y / 37 + 3; z++) {
											for (int zi = tempT1.x / 37 - 2; zi < tempT1.x / 37 + 3; zi++) {
												if (tempT1.y - 2 >= 0 && tempT1.y + 3 < 19 && tempT1.x >= 0
														&& tempT1.x < 19 && min > weightGraph[z][zi]) {
													tempT1.x = zi;
													tempT1.y = z;
												}
											}
										}
									}
//                           
									AIRobot.mouseMove(tempT1.x + 37 * 3, tempT1.y + 37 * 2);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
//                           
									for (int i = 0; i < whiteList.size(); i++) {
										tempT2 = whiteList.get(i);
										for (int z = tempT2.y / 37 - 2; z < tempT2.y / 37 + 3; z++) {
											for (int zi = tempT2.x / 37 - 2; zi < tempT2.x / 37 + 3; zi++) {
												if (tempT2.x - 2 >= 0 && tempT2.x < 19 && tempT2.y - 2 >= 0
														&& tempT2.y + 3 < 19 && min > weightGraph[z][zi]) {
													tempT2.x = zi;
													tempT2.y = z;
												}
											}
										}
									}

									AIRobot.mouseMove(tempT2.x + 37 * 2, tempT2.y + 37);
									AIRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
									AIRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

								}
							} else {
								blackCount++;
								blackList.add(blackPoint);
								pointList.add(blackPoint);

							}
						}

					} else if (mode == 2) {

						whitePoint = e.getPoint();
						white = new JLabel(new ImageIcon(Main.class.getResource("whiteRock.png")));

						white.setBackground(new Color(220, 179, 92));
						for (int i = 0; i < 19; i++) {
							if (whitePoint.x >= 37 * i && whitePoint.x <= 37 * (i + 1)) {
//                        whitePoint.x = 37 * i + 20  ;
								whitePoint.x = 37 * i;
							}
							if (whitePoint.y >= 37 * i && whitePoint.y <= 37 * (i + 1)) {
//                        whitePoint.y = 37 * i + 20 ;
								whitePoint.y = 37 * i;
							}
						}

						white.setBounds(whitePoint.x, whitePoint.y, 35, 35);

						try {
							whiteBI = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/whiteRock.png"));
						} catch (Exception e1) {
							e1.printStackTrace();
						}
						getContentPane().add(white);
						white.setIcon(new ImageIcon(whiteBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
						panel.add(white);

						boolean check = true;
						for (int i = 0; i < pointList.size(); i++) {
							if (pointList.get(i).x == whitePoint.x && pointList.get(i).y == whitePoint.y) {
								check = false;
								break;
							}
						}

						if (check) {
							benSpot.setOpaque(false);
							white.setOpaque(true);
							selectedPoint[whitePoint.y / 37][whitePoint.x / 37] = 2;
							for (int i = 0; i < 3; i++) {
								for (int j = 0; j < 3; j++) {
									if (i == 1 && j == 1) {
										weightGraph[whitePoint.y / 37][whitePoint.x / 37] = 2222;
									} else {
										if ((whitePoint.y / 37 + arr[i] >= 0 && whitePoint.x / 37 + arr[i] >= 0
												&& whitePoint.x / 37 + arr[i] < 19 && whitePoint.y / 37 + arr[i] < 19)
												|| (whitePoint.y / 37 + arr[j] >= 0 && whitePoint.x / 37 + arr[j] >= 0
														&& whitePoint.x / 37 + arr[j] < 19
														&& whitePoint.y / 37 + arr[j] < 19)) {
											weightGraph[whitePoint.y / 37 + arr[i]][whitePoint.x / 37 + arr[j]] += 1;
										}
									}
								}
							}

							int vic = victory();
							if (vic == 1) {
								System.out.println("BLACK WIN !");
								finish.setWinner(1);
								f = new finish();
								f.setVisible(true);
								gameStart = false;
								finish.win1 += 1;
								finish.lose2 += 1;
							} else if (vic == 2) {
								System.out.println("WHITE WIN !");
								finish.setWinner(2);
								f = new finish();
								f.setVisible(true);
								gameStart = false;
								finish.win2 += 1;
								finish.lose1 += 1;
							}
							if (!firstCheck) {
								currentRock.setBackground(Color.black);
								currentRock.setOpaque(true);
								currentRock.setIcon(
										new ImageIcon(blackBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
								count = 1500;
								mode = 1;
								whiteList.add(whitePoint);
								pointList.add(whitePoint);
							} else if (firstCheck && whiteCount == 2) {
								currentRock.setBackground(Color.black);
								currentRock.setOpaque(true);
								currentRock.setIcon(
										new ImageIcon(blackBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
								count = 1500;
								whiteCount = 1;
								mode = 1;
								whiteList.add(whitePoint);
								pointList.add(whitePoint);
							} else {
								whiteCount++;
								whiteList.add(whitePoint);
								pointList.add(whitePoint);
							}
						}
					}

					// 승 패 체크
				}
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub

			}

		});

		JButton startButton = new JButton("Game Start");
		startButton.setFont(new Font("Bradley Hand", Font.BOLD, 25));
		startButton.setForeground(Color.WHITE);
		startButton.setBorderPainted(false);
		startButton.setFocusable(false);
		startButton.setOpaque(true);
		startButton.setBackground(Color.black);
		startButton.setBounds(830, 100, 200, 80);
		getContentPane().add(startButton);
		startButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (gameStart) {
					for (int i = 0; i < selectedPoint.length; i++) {
						for (int j = 0; j < selectedPoint[i].length; j++) {
							selectedPoint[i][j] = 0;
						}
					}
					blackList.clear();
					whiteList.clear();
					pointList.clear();

					gameStart = false;
					mode = 0;
					timer.start();
					if (firstCheck) {
						Main.setFinishCheck(true);
					}
				} else {

					gameStart = true;
					mode = 1;
					timer.start();
//               if(firstCheck) {
//                  Main.setFinishCheck(true);
//               }

				}
			}

		});

		board.setBounds(31, 33, 700, 700);

		getContentPane().add(board);

		panel = new JPanel();
		panel.setBounds(31, 33, 700, 700);
		getContentPane().add(panel);
		panel.setLayout(null);

		JButton exitButton = new JButton(new ImageIcon(Main.class.getResource("exit.png")));
		exitButton.setBackground(Color.black);
		exitButton.setBorderPainted(false);
		exitButton.setBounds(996, 644, 85, 85);
		exitButton.setOpaque(true);
		getContentPane().add(exitButton);
		exitButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				System.exit(1);
			}

		});

		JLabel lblNewLabel_1 = new JLabel("\uC2DC\uAC04: ");
		lblNewLabel_1.setForeground(Color.WHITE);
		lblNewLabel_1.setFont(new Font("굴림", Font.PLAIN, 18));
		lblNewLabel_1.setBounds(832, 561, 48, 47);
		getContentPane().add(lblNewLabel_1);

		JLabel time = new JLabel();

		time.setFont(new Font("굴림", Font.BOLD, 20));
		time.setForeground(Color.WHITE);
		time.setBounds(892, 566, 70, 35);
		getContentPane().add(time);

		JButton stopButton = new JButton(new ImageIcon(Main.class.getResource("pause.png")));
		stopButton.setBounds(996, 555, 58, 58);
		getContentPane().add(stopButton);
		stopButton.setBorderPainted(false);

		JButton giveup = new JButton("기권");
		giveup.setBackground(Color.black);
		giveup.setForeground(Color.black);
		giveup.setFocusable(false);
//      giveup.setBorderPainted(false);
		giveup.setForeground(Color.WHITE);
		giveup.setFont(new Font("굴림", Font.PLAIN, 18));
		giveup.setBounds(797, 475, 127, 58);
		getContentPane().add(giveup);
		giveup.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (mode == 1) {
					finish.setWinner(2);
					finish.win2 += 1;
					finish.lose1 += 1;
				} else if (mode == 2) {
					finish.setWinner(1);
					finish.win1 += 1;
					finish.lose2 += 2;
				}
				timer.stop();
				gameStart = false;
				f = new finish();
				f.setVisible(true);
				pointList.clear();
				blackList.clear();
				whiteList.clear();
			}

		});

		JButton drew = new JButton("무승부");
		drew.setBackground(Color.black);
		drew.setForeground(Color.black);
//      drew.setBorderPainted(false);
		drew.setFocusable(false);
		drew.setForeground(Color.WHITE);
		drew.setFont(new Font("굴림", Font.PLAIN, 18));
		drew.setBounds(953, 475, 127, 58);
		getContentPane().add(drew);

		JLabel currentOrder = new JLabel("현재 차례:");
		currentOrder.setForeground(Color.WHITE);
		currentOrder.setBounds(797, 337, 70, 40);
		getContentPane().add(currentOrder);

		currentRock = new JLabel(new ImageIcon(blackBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));

		currentRock.setBounds(867, 337, 35, 35);
		getContentPane().add(currentRock);

		drew.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Drew.setDrewUser(mode);
				d = new Drew();
				d.setVisible(true);
			}

		});

		stopButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (gameStart == false) {
					gameStart = true;
					timer.restart();
				} else { // true
					gameStart = false;
					timer.stop();
				}
			}
		});

		timer = new Timer(1000, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (gameStart) {
					count--;
					time.setText(String.valueOf(count));
					if (count == 0) {
						if (mode == 1 || blackCount == 2) {
							currentRock.setBackground(Color.black);
							currentRock.setOpaque(true);
							currentRock.setIcon(
									new ImageIcon(whiteBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
							mode = 2;
							count = 1500;
						} else if (mode == 2 || whiteCount == 2) {
							currentRock.setBackground(Color.black);
							currentRock.setOpaque(true);
							currentRock.setIcon(
									new ImageIcon(blackBI.getScaledInstance(35, 35, BufferedImage.TYPE_INT_RGB)));
							mode = 1;
							count = 1500;

						}
					}
				}
			}
		});

	}

	public void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
//      super.paintComponents(g);

		if (mode == 1) {
			g2.drawOval(blackPoint.x, blackPoint.y, 10, 10);
		} else if (mode == 2) {

		}
//      g2.drawImage(blackBI, blackPoint.x, blackPoint.y, null);
	}

	public int victory() {
		int victory = 0; // 1 : black , 2: white

//      for(int i =  0; i < selectedPoint.length; i++) {
//         for(int j = 0 ;j < selectedPoint[i].length; j++) {
//            System.out.print(selectedPoint[i][j] + " ");
//         }
//         System.out.println();
//      }
//      System.out.println();

		if (mode == 1) {
			if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37] == 1) { // 가로
				int count = 0;
				boolean check1 = false, check2 = false;
				if (blackPoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 + k] == 1) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}

				if (blackPoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 - k] == 1) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 1;
					}
				} else {
					if (count == 6) {
						return 1;
					}
				}
			}

			if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37] == 1) { // 세로
				int count = 0;
				boolean check1 = false, check2 = false;
				if (blackPoint.y / 37 + 5 < 19) { // 아래로
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37] == 1) {
//                     System.out.println(blackPoint.y/37 + k + " " + blackPoint.x/37);
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}
//            System.out.println(count + "1");
				if (blackPoint.y / 37 - 5 >= 0) { // 위로
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37] == 1) {
//                     System.out.println(blackPoint.y/37 - k + " " + blackPoint.x/37);
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 1;
					}
				} else {
					if (count == 6) {
						return 1;
					}
				}
			}
			if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37] == 1) { // 오른쪽 대각선 아래
				int count = 0;
				boolean check1 = false, check2 = false;
				if (blackPoint.y / 37 + 5 < 19 && blackPoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 + k] == 1) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}

				}
				if (blackPoint.y / 37 - 5 >= 0 && blackPoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 - k] == 1) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 1;
					}
				} else {
					if (count == 6) {
						return 1;
					}
				}
			}

			if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37] == 1) { // 왼쪽 대각선 아래 + 오른쪽 대각선 위
				int count = 0;
				boolean check1 = false, check2 = false;

				if (blackPoint.y / 37 + 5 < 19 && blackPoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 - k] == 1) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}

				if (blackPoint.y / 37 - 5 >= 0 && blackPoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 + k] == 1) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 1;
					}
				} else {
					if (count == 6) {
						return 1;
					}
				}
			}
		} else if (mode == 2) {
			if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37] == 2) { // 가로
				int count = 0;
				boolean check1 = false, check2 = false;
				if (whitePoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37 + k] == 2) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}

				if (whitePoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37 - k] == 2) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 2;
					}
				} else {
					if (count == 6) {
						return 2;
					}
				}
			}

			if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37] == 2) { // 세로
				int count = 0;
				boolean check1 = false, check2 = false;
				if (whitePoint.y / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[k + whitePoint.y / 37][whitePoint.x / 37] == 2) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}
//            System.out.println(count + "1");
				if (whitePoint.y / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37 - k][whitePoint.x / 37] == 2) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 2;
					}
				} else {
					if (count == 6) {
						return 2;
					}
				}
			}
			if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37] == 2) { // 오른쪽 대각선 아래
				int count = 0;
				boolean check1 = false, check2 = false;
				if (whitePoint.y / 37 + 5 < 19 && whitePoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37 + k][whitePoint.x / 37 + k] == 2) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}
				if (whitePoint.y / 37 - 5 >= 0 && whitePoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37 - k][whitePoint.x / 37 - k] == 2) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 2;
					}
				} else {
					if (count == 6) {
						return 2;
					}
				}
			}

			if (selectedPoint[whitePoint.y / 37][whitePoint.x / 37] == 2) { // 왼쪽 대각선 아래 + 오른쪽 대각선 위
				int count = 0;
				boolean check1 = false, check2 = false;
				if (blackPoint.y / 37 + 5 < 19 && whitePoint.x / 37 - 5 >= 0) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37 + k][whitePoint.x / 37 - k] == 2) {
							count++;
							check1 = true;
						} else {
							break;
						}
					}
				}

				if (whitePoint.y / 37 - 5 >= 0 && whitePoint.x / 37 + 5 < 19) {
					for (int k = 0; k < 6; k++) {
						if (selectedPoint[whitePoint.y / 37 - k][whitePoint.x / 37 + k] == 2) {
							count++;
							check2 = true;
						} else {
							break;
						}
					}
				}
				if (check1 && check2) {
					if (count - 1 == 6) {
						return 2;
					}
				} else {
					if (count == 6) {
						return 2;
					}
				}
			}
		}
		return victory;

	}

	public static finish getFinish() {
		return f;
	}

	public static Drew getDrew() {
		return d;
	}

	public Point searchPoint() {
		Point search = new Point();

		return search;
	}

	public boolean BlackBlock(Point t) { // 흰색기준 검정 찾기
		// ArrayList

		if (selectedPoint[t.y / 37][t.x / 37] == 1) {
			// 가로
			int count = 0;
			int idx1 = 0, idx2 = 0;
			boolean check1 = false, check2 = false;
			if (blackPoint.x / 37 + 3 < 19) {
				for (int k = 0; k < 4; k++) {
					if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 + k] == 1) { // 오른쪽
						count++;
						check1 = true;
					} else {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 + k] == 0) {
							idx1 = k;
						}
						break;
					}
				}

				if (blackPoint.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 - k] == 1) { // 왼쪽
							count++;
							check2 = true;
						} else {
							if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 - k] == 0) {
								idx2 = k;
							}
							break;
						}
					}
				}

				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = blackPoint.x / 37 + idx1;
					temp.y = blackPoint.y / 37;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 - idx2;
					temp2.y = blackPoint.y / 37;

//            if(temp.x-1 == temp2.x && temp.x == temp2.y) {
//               if(selectedPoint[temp2.y][temp2.x-1] == 1) {
//                  
//                  System.out.println("HELLO");
//                  temp2.x = temp.x-5;
//                  temp2.y = temp.y;
//               }else if(selectedPoint[temp2.y][temp2.x+1] == 1) {
//                  System.out.println("HELLO!");
//                  temp.x = temp2.x+5;
//                  temp.y = temp2.y;
//               }
//            }
					blackSearch.add(temp);
					blackSearch.add(temp2);
//            System.out.println("가로 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 3 < 19) { // 아래로
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37] == 1) {
//                  System.out.println(blackPoint.y/37 + k + " " + blackPoint.x/37);
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;
						}
					}
				}
//         System.out.println(count + "1");
				if (blackPoint.y / 37 - 3 >= 0) { // 위로
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37] == 1) {
//                  System.out.println(blackPoint.y/37 - k + " " + blackPoint.x/37);
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = blackPoint.x / 37;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("세로 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 3 < 19 && blackPoint.x / 37 + 3 < 19) { // 대각선 왼오
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 + k] == 1) {
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;

						}
					}

				}
				if (blackPoint.y / 37 - 3 >= 0 && blackPoint.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 - k] == 1) {
							System.out.println("COME");
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				System.out.println(count + "대각선1");
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = blackPoint.x / 37 + idx1;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 - idx2;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("대각선 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 3 < 19 && blackPoint.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 - k] == 1) {
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;
						}
					}
				}

				if (blackPoint.y / 37 - 3 >= 0 && blackPoint.x / 37 + 3 < 19) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 + k] == 1) {
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				System.out.println(count + "대각선2");
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = blackPoint.x / 37 - idx1;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 + idx2;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("대각선 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
			}
		}
		return false;
	}

	public boolean BlackBlockFive(Point t) { // 흰색기준 검정 찾기
		// ArrayList

		if (selectedPoint[t.y / 37][t.x / 37] == 1) {
			// 가로
			int count = 0;
			int idx1 = 0, idx2 = 0;
			boolean check1 = false, check2 = false;
			if (blackPoint.x / 37 + 4 < 19) {
				for (int k = 0; k < 5; k++) {
					if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 + k] == 1) {
						count++;
						check1 = true;
					} else {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 + k] == 0) {
							idx1 = k;
						}
						break;
					}
				}

				if (blackPoint.x / 37 - 4 >= 0) {
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 - k] == 1) {
							count++;
							check2 = true;
						} else {
							if (selectedPoint[blackPoint.y / 37][blackPoint.x / 37 - k] == 0) {
								idx2 = k;
							}
							break;
						}
					}
				}
				System.out.println(count + " 5줄 가로 갯수");
				if (count - 1 == 5) {
					System.out.println("가로 5개 완성");
					Point temp = new Point();
					temp.x = blackPoint.x / 37 + idx1;
					temp.y = blackPoint.y / 37;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 - idx2;
					temp2.y = blackPoint.y / 37;
					blackSearch.add(temp);
					blackSearch.add(temp2);
//            System.out.println("가로 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 4 < 19) { // 아래로
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37] == 1) {
//                  System.out.println(blackPoint.y/37 + k + " " + blackPoint.x/37);
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;
						}
					}
				}
//         System.out.println(count + "1");
				if (blackPoint.y / 37 - 4 >= 0) { // 위로
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37] == 1) {
//                  System.out.println(blackPoint.y/37 - k + " " + blackPoint.x/37);
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				System.out.println(count + " 5줄 세로 갯수");
				if (count - 1 == 5) {
					System.out.println("5개 세로 성공");
					Point temp = new Point();
					temp.x = blackPoint.x / 37;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 4 < 19 && blackPoint.x / 37 + 4 < 19) { // 대각선 왼오
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 + k] == 1) {
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;

						}
					}

				}
				if (blackPoint.y / 37 - 4 >= 0 && blackPoint.x / 37 - 4 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 - k] == 1) {
							System.out.println("COME");
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
//         System.out.println(count + "5개 대각선1 갯수");

				if (count - 1 == 5) {
					System.out.println("5개 대각선 성공");
					Point temp = new Point();
					temp.x = blackPoint.x / 37 + idx1;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 - idx2;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 4 < 19 && blackPoint.x / 37 - 4 >= 0) {
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37 + k][blackPoint.x / 37 - k] == 1) {
							count++;
							check1 = true;
						} else {
							idx1 = k;
							break;
						}
					}
				}

				if (blackPoint.y / 37 - 4 >= 0 && blackPoint.x / 37 + 4 < 19) {
					for (int k = 0; k < 5; k++) {
						if (selectedPoint[blackPoint.y / 37 - k][blackPoint.x / 37 + k] == 1) {
							count++;
							check2 = true;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				System.out.println(count + "5개 대각선2 갯수");
				if (count - 1 == 5) {
					System.out.println("5개 대각선2 성공 !");
					Point temp = new Point();
					temp.x = blackPoint.x / 37 - idx1;
					temp.y = blackPoint.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = blackPoint.x / 37 + idx2;
					temp2.y = blackPoint.y / 37 - idx2;
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("대각선 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
			}
		}
		return false;
	}

	public boolean attackFour() { // 4 개

		for (int i = 0; i < whiteList.size(); i++) {
			Point tmp = whiteList.get(i);
			int count = 0;
			int idx1 = 0, idx2 = 0;

			if (tmp.x / 37 + 3 < 19) {
				for (int k = 0; k < 4; k++) {
					if (selectedPoint[tmp.y / 37][tmp.x / 37 + k] == 2) { // 으른쪽
						count++;
					} else {
						if (selectedPoint[tmp.y / 37][tmp.x / 37 + k] == 0) {
							idx1 = k;
						}
						break;
					}
				}

				if (blackPoint.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37][tmp.x / 37 - k] == 2) { // 왼쪽
							count++;
						} else {
							if (selectedPoint[tmp.y / 37][tmp.x / 37 - k] == 0) {
								idx2 = k;
							}
							break;
						}
					}
				}

				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = tmp.x / 37 + idx1;
					temp.y = tmp.y / 37;
					Point temp2 = new Point();
					temp2.x = tmp.x / 37 - idx2;
					temp2.y = tmp.y / 37;

					if (selectedPoint[temp.y][temp.x] == 1) {
						if (selectedPoint[temp2.y][temp2.x + 1] == 0) {
							temp.x = temp2.x + 1;
							temp.y = temp2.y;
						} else { // 가중치에 따라 행동
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp.x = zi;
										temp.y = z;
									}
								}
							}
						}
					} else if (selectedPoint[temp2.y][temp2.x] == 1) {
						if (selectedPoint[temp.y][temp.x - 1] == 0) {
							temp2.x = temp.x - 1;
							temp2.y = temp.y;
						} else {
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp2.x = zi;
										temp2.y = z;
									}
								}
							}
						}
					}

					blackSearch.add(temp);
					blackSearch.add(temp2);
//            System.out.println("가로 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (blackPoint.y / 37 + 3 < 19) { // 아래로
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 + k][tmp.x / 37] == 2) {
//                  System.out.println(blackPoint.y/37 + k + " " + blackPoint.x/37);
							count++;
						} else {
							idx1 = k;
							break;
						}
					}
				}
//         System.out.println(count + "1");
				if (blackPoint.y / 37 - 3 >= 0) { // 위로
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 - k][tmp.x / 37] == 2) {
//                  System.out.println(blackPoint.y/37 - k + " " + blackPoint.x/37);
							count++;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = tmp.x / 37;
					temp.y = tmp.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = tmp.x / 37;
					temp2.y = tmp.y / 37 - idx2;

					if (selectedPoint[temp.y][temp.x] == 1) { // 아래에 검은돌 존재할 경우
						if (selectedPoint[temp2.y - 1][temp2.x] == 0) {
							temp.x = temp2.x;
							temp.y = temp2.y - 1;
						} else { // 가중치에 따라 행동
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp.x = zi;
										temp.y = z;
									}
								}
							}
						}
					} else if (selectedPoint[temp2.y][temp2.x] == 1) { // 위에 검은돌 존재할 경우
						if (selectedPoint[temp.y + 1][temp.x] == 0) {
							temp2.x = temp.x;
							temp2.y = temp.y + 1;
						} else {
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp2.x = zi;
										temp2.y = z;
									}
								}
							}
						}
					}

					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("세로 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (tmp.y / 37 + 3 < 19 && tmp.x / 37 + 3 < 19) { // 대각선 왼오
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 + k][tmp.x / 37 + k] == 2) {
							count++;
						} else {
							idx1 = k;
							break;

						}
					}

				}
				if (tmp.y / 37 - 3 >= 0 && tmp.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 - k][tmp.x / 37 - k] == 2) {
							count++;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = tmp.x / 37 + idx1;
					temp.y = tmp.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = tmp.x / 37 - idx2;
					temp2.y = tmp.y / 37 - idx2;

					if (selectedPoint[temp.y][temp.x] == 1) {
						if (selectedPoint[temp2.y - 1][temp2.x - 1] == 0) {
							temp.x = temp2.x - 1;
							temp.y = temp2.y - 1;
						} else { // 가중치에 따라 행동
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp.x = zi;
										temp.y = z;
									}
								}
							}
						}
					} else if (selectedPoint[temp2.y][temp2.x] == 1) {
						if (selectedPoint[temp.y + 1][temp.x + 1] == 0) {
							temp2.x = temp.x + 1;
							temp2.y = temp.y + 1;
						} else {
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp2.x = zi;
										temp2.y = z;
									}
								}
							}
						}
					}

					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("대각선 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
				if (tmp.y / 37 + 3 < 19 && tmp.x / 37 - 3 >= 0) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 + k][tmp.x / 37 - k] == 2) {
							count++;
						} else {
							idx1 = k;
							break;
						}
					}
				}

				if (tmp.y / 37 - 3 >= 0 && tmp.x / 37 + 3 < 19) {
					for (int k = 0; k < 4; k++) {
						if (selectedPoint[tmp.y / 37 - k][tmp.x / 37 + k] == 2) {
							count++;
						} else {
							idx2 = k;
							break;
						}
					}
				}
				System.out.println(count + "대각선2");
				if (count - 1 == 4) {
					Point temp = new Point();
					temp.x = tmp.x / 37 - idx1;
					temp.y = tmp.y / 37 + idx1;
					Point temp2 = new Point();
					temp2.x = tmp.x / 37 + idx2;
					temp2.y = tmp.y / 37 - idx2;

					if (selectedPoint[temp.y][temp.x] == 1) {
						if (selectedPoint[temp2.y + 1][temp2.x - 1] == 0) {
							temp.x = temp2.x + 1;
							temp.y = temp2.y - 1;
						} else { // 가중치에 따라 행동
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp.x = zi;
										temp.y = z;
									}
								}
							}
						}
					} else if (selectedPoint[temp2.y][temp2.x] == 1) {
						if (selectedPoint[temp.y - 1][temp.x + 1] == 0) {
							temp2.x = temp.x - 1;
							temp2.y = temp.y + 1;
						} else {
							int min = 999999;
							for (int z = tmp.y / 37 - 2; z < tmp.y / 37 + 3; z++) {
								for (int zi = tmp.x / 37 - 2; zi < tmp.x / 37 + 3; zi++) {
									if (min > weightGraph[z][zi]) {
										temp2.x = zi;
										temp2.y = z;
									}
								}
							}
						}
					}
					blackSearch.add(temp); // 수정 필요
					blackSearch.add(temp2);
//            System.out.println("대각선 4개 완성!");
//            System.out.println(temp.x + " " + temp.y + " " + selectedPoint[temp.y][temp.x]);
//            System.out.println(temp2.x + " " + temp2.y + " " + selectedPoint[temp2.y][temp2.x]);
					return true;
				}
				count = 0;
				idx1 = 0;
				idx2 = 0;
			}
		}
		return false;
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}