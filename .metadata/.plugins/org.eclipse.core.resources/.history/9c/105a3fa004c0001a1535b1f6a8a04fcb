import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.*;

public class Can extends JLabel implements MouseListener, MouseMotionListener {

	Point point;
	int color = -1;
	static int num = 0;
	BufferedImage blackDol;
	BufferedImage whiteDol;
	BufferedImage victory;
	BufferedImage lose;
	int win = -1;

	public Can(int x, int y) {
		Color backColor = new Color(94, 129, 151);
		setBackground(backColor);
		point = new Point(x, y);
		setLocation(25 * x + 15, 25 * y);
		setSize(18, 18);
		addMouseListener(this);
		setOpaque(true);

	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseMoved(MouseEvent e) {

		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		this.setEnabled(false);
		// TODO Auto-generated method stu
//		System.out.println(point.x + " " + point.y);
//		System.out.println(num);

		// 색깔 지정
		try {
			whiteDol = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/Carcass/YELLOW.png"));
			blackDol = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/Carcass/BLUE.png"));
			victory = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/Carcass/oneTong.png"));
			lose = ImageIO.read(new File("/Users/minjoo/Desktop/eclipse-workspace/Carcass/55.png"));
			
			
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
//		System.out.println(point);

		if (Main.refereeB) {
			color = 2;
		} else if (Main.turnB == true && Main.refereeB == false) {
			color = 0;
			num++;
			if (num % 4 == 1) {
				Main.turnB = false;
				Main.count = 16;
			}
		} else if (Main.turnB == false && Main.refereeB == false) {
			color = 1;
			num++;
			if (num % 4 == 3) {
				Main.turnB = true;
				Main.count = 16;
			}

		}
		// 마지막 놓은 돌의 가로, 세로, 대각선체크
		// 가로
		Can[][] tempWin = Main.win;
//		System.out.println(Main.win[point.x][point.y]);
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.x + i < 19
					&& tempWin[point.x][point.y].color == tempWin[point.x + i][point.y].color) {
				win++;
//				System.out.println("right"+win);
			} else
				break;
		}
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.x - i >= 0
					&& tempWin[point.x][point.y].color == tempWin[point.x - i][point.y].color) {
				win++;
//				System.out.println("left"+win);
			} else
				break;
		}
		if (win == 6) {
			System.out.println("win");
			Main.t.stop();
			JFrame winFrame = new JFrame() {
				public void paint(Graphics g) {
					if (tempWin[point.x][point.y].color == 0) {
						System.out.println("Earth Wins!");
						g.drawImage(lose, 0, 20, 300, 300, null);
					} else if (tempWin[point.x][point.y].color == 1) {
						System.out.println("Na+ Wins!");
						g.drawImage(victory, 0, 20, 300, 300, null);
					}
					
				}
			};
			winFrame.setSize(300, 300);
			winFrame.setLocation(730, 380);
			winFrame.setBackground(new Color(119, 136, 153));
			winFrame.setVisible(true);
			
		}
		win = -1;
		// 세로
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.y + i < 19
					&& tempWin[point.x][point.y].color == tempWin[point.x][point.y + i].color) {
				win++;
//				System.out.println("right"+win);
			} else
				break;
		}
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.y - i >= 0
					&& tempWin[point.x][point.y].color == tempWin[point.x][point.y - i].color) {
				win++;
//				System.out.println("left"+win);
			} else
				break;
		}
		if (win == 6) {
			System.out.println("win");
			Main.t.stop();
			JFrame winFrame = new JFrame() {
				public void paint(Graphics g) {
					if (tempWin[point.x][point.y].color == 0) {
						System.out.println("Earth Wins!");
						g.drawImage(lose, 0, 20, 300, 300, null);
					} else if (tempWin[point.x][point.y].color == 1) {
						System.out.println("Na+ Wins!");
						g.drawImage(victory, 0, 20, 300, 300, null);
					}
				}
			};
			winFrame.setSize(300, 300);
			winFrame.setLocation(730, 380);
			winFrame.setBackground(new Color(119, 136, 153));
			winFrame.setVisible(true);
		}
		win = -1;
		// 정비례 대각선
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.x + i < 19 && point.y - i >= 0
					&& tempWin[point.x][point.y].color == tempWin[point.x + i][point.y - i].color) {
				win++;
//				System.out.println("right"+win);
			} else
				break;
		}
		for (int i = 0; i < 6; i++) {

			if (tempWin[point.x][point.y].color != 2 && point.x - i >= 0 && point.y + i < 19
					&& tempWin[point.x][point.y].color == tempWin[point.x - i][point.y + i].color) {
				win++;
//				System.out.println("right"+win);
			} else
				break;
		}
		if (win == 6) {
			System.out.println("win");
			Main.t.stop();
			JFrame winFrame = new JFrame() {
				public void paint(Graphics g) {
					if (tempWin[point.x][point.y].color == 0) {
						System.out.println("Earth Wins!");
						g.drawImage(lose, 0, 20, 300, 300, null);
					} else if (tempWin[point.x][point.y].color == 1) {
						System.out.println("Na+ Wins!");
						g.drawImage(victory, 0, 20, 300, 300, null);
					}
				}
			};
			winFrame.setSize(300, 300);
			winFrame.setLocation(730, 380);
			winFrame.setBackground(new Color(119, 136, 153));
			winFrame.setVisible(true);
		}
		win = -1;
		// 반비례 대각선
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.x + i < 19 && point.y + i < 19
					&& tempWin[point.x][point.y].color == tempWin[point.x + i][point.y + i].color) {
				win++;
			} else
				break;
		}
		for (int i = 0; i < 6; i++) {
			if (tempWin[point.x][point.y].color != 2 && point.x - i >= 0 && point.y - i >= 0
					&& tempWin[point.x][point.y].color == tempWin[point.x - i][point.y - i].color) {
				win++;
			} else
				break;
		}
//		System.out.println("win: "+win);
		if (win == 6) {
			System.out.println("win");
			Main.t.stop();
			JFrame winFrame = new JFrame() {
				public void paint(Graphics g) {
					if (tempWin[point.x][point.y].color == 0) {
						System.out.println("Earth Wins!");
						g.drawImage(lose, 0, 20, 300, 300, null);
					} else if (tempWin[point.x][point.y].color == 1) {
						System.out.println("Na+ Wins!");
						g.drawImage(victory, 0, 20, 300, 300, null);
					}
				}
			};
			winFrame.setSize(300, 300);
			winFrame.setLocation(730, 380);
			winFrame.setBackground(new Color(119, 136, 153));
			winFrame.setVisible(true);
		}
		repaint();
		this.removeMouseListener(this);
		this.removeMouseMotionListener(this);

	}

	@Override
	public void mousePressed(MouseEvent e) {

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		setCursor(new Cursor(Cursor.HAND_CURSOR));
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}

	public void paint(Graphics g) {
		if (color == 0) {
			g.drawImage(blackDol, 0, 0, 18, 18, null);
		} else if (color == 1) {
			g.drawImage(whiteDol, 0, 0, 18, 18, null);
		} else if (color == 2) {
			g.setColor(Color.BLACK);
			g.fillOval(0, 0, 18, 18);
		}
	}

}
